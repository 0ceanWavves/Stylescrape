---
description: Specific rules for the Website Cloner GUI project
globs: **/*.{js,jsx,ts,tsx,css,html}
---
# Website Cloner GUI - Specific Rules

<rule>
name: website_cloner_component_structure
description: Enforce consistent component structure for the Website Cloner GUI
filters:
  - type: file_extension
    pattern: "\\.(js|jsx|ts|tsx)$"
  - type: file_path
    pattern: ".*components/.*"

actions:
  - type: suggest
    message: |
      # Component Structure for Website Cloner GUI

      1.  **Use Functional Components:** Always use functional components with hooks.
      2.  **Import Material-UI Components:** Import necessary components from `@mui/material`.
      3.  **CSS Modules:** Use CSS Modules for styling (e.g., `import styles from './Component.module.css'`).
      4.  **Props:** Define prop types using TypeScript interfaces.
      5.  **State:** Use `useState` for local component state.
      6.  **Handlers:** Prefix event handler functions with `handle` (e.g., `handleClick`).
      7. **Component Comments** Use JSDoc style comments to document the purpose of the component.

      Example:

      ```tsx
      import React, { useState } from 'react';
      import { Button } from '@mui/material';
      import styles from './MyComponent.module.css';

      /**
       * @component
       * @description A brief description of what MyComponent does.
       * @param {Object} props - Component props
       * @param {string} props.someProp - Description of someProp.
       * @returns {JSX.Element}
       */
      function MyComponent({ someProp }: { someProp: string }) {
          const [count, setCount] = useState(0);

          const handleClick = () => {
              setCount(count + 1);
          };

          return (
              <div className={styles.container}>
                  <Button variant="contained" onClick={handleClick}>
                      Click Me ({count})
                  </Button>
              </div>
          );
      }

      export default MyComponent;
      ```
metadata:
  priority: high
  version: 1.0
</rule>

<rule>
name: website_cloner_cursor_tools_integration
description: Guide the use of cursor-tools within the Website Cloner GUI project
filters:
- type: file_path
  pattern: ".*App.tsx"

actions:
  - type: suggest
    message: |
      # cursor-tools and API Integration in App.tsx

      `App.tsx` should make API calls to the Node.js backend (server.js) to perform cloning and analysis.  The backend will then use your existing Node.js scripts (website-cloner.js, etc.)

      **Key Changes:**

      *   **`fetch` API:** Use the `fetch` API to make POST requests to `/api/clone`.
      *   **`async/await`:** Use `async/await` for handling asynchronous requests.
      *   **Error Handling:** Implement proper error handling with `try...catch` blocks.
      *   **State Management:** Update component state (`cloning`, `progress`, `libraries`, `error`) based on the API response.
      * **Backend Communication:** Ensure your Node.js scripts output JSON for easy parsing in the frontend.

      ```typescript
      // ... (Inside App.tsx) ...

      const handleClone = async (url: string, options: { cloneAssets: boolean; extractLibraries: boolean; }) => {
        setCloning(true);
        setProgress([]);
        setLibraries([]);
        setError(null);

        try {
          const response = await fetch('http://localhost:3001/api/clone', { // Correct URL
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url, ...options }), // Send options as JSON
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Cloning failed');
          }

          const data = await response.json(); // Parse JSON response

          // Update state based on the response data
          if (data.progress) { setProgress(data.progress); }
          if (data.libraries) { setLibraries(data.libraries); }
          // ... (Handle other data from the backend) ...

        } catch (err:any) {
          setError(err.message); // Set error state
        } finally {
          setCloning(false);
        }
      };
      ```
metadata:
  priority: high
  version: 1.1
</rule>

<rule>
    name: website_cloner_backend_integration
    description:  Advise on backend development for website-ripping-tools
    filters:
        - type: file_path
          pattern: ".*server.js"
    actions:
        - type: suggest
          message: |
            # Backend Development (server.js)

            The backend should use Express.js to handle requests from the frontend and execute your existing Node.js scripts.

            **Key Responsibilities:**

            *   **API Endpoints:** Create API endpoints (e.g., `/api/clone`, `/api/extract-design`) to handle different tasks.
            *   **CORS:** Enable Cross-Origin Resource Sharing (CORS) to allow requests from your React app (running on a different port).
            *   **Request Handling:** Parse request bodies (JSON) to get parameters like the URL and options.
            *   **Script Execution:** Use `child_process.exec` or `child_process.spawn` to run your existing Node.js scripts (e.g., `website-cloner.js`).
            *   **JSON Output:** Ensure your Node.js scripts output results in JSON format.
            *   **Error Handling:** Handle errors from script execution and send appropriate error responses to the frontend.
            *   **Progress Updates:** If possible, modify your scripts to send progress updates to the frontend (e.g., using Server-Sent Events or WebSockets).

            ```javascript
            // server.js (Example)
            const express = require('express');
            const cors = require('cors');
            const { exec } = require('child_process');
            const app = express();
            const port = 3001;

            app.use(cors());
            app.use(express.json());

            app.post('/api/clone', (req, res) => {
                const { url, cloneAssets, extractLibraries } = req.body;

                let command = `node website-cloner.js --url="${url}"`;
                if (cloneAssets) { command += ' --assets'; }
                if (extractLibraries) { command += ' --extract'; }

                exec(command, (error, stdout, stderr) => {
                    if (error) {
                        res.status(500).send({ error: 'Cloning failed', details: stderr });
                        return;
                    }
                    try {
                        const result = JSON.parse(stdout);
                        res.send(result);
                    } catch (parseError) {
                        res.status(500).send({ error: 'Failed to parse results', details: stdout });
                    }
                });
            });

            // ... (Other API endpoints) ...

            app.listen(port, () => {
                console.log(`Server listening at http://localhost:${port}`);
            });
            ```
            Make sure your `website-cloner.js` and other scripts are designed to be used as modules and can handle command line arguments. Use a library like `yargs` to simplify argument parsing.
            ```javascript
            //website-cloner.js example
            const yargs = require('yargs/yargs');
            const { hideBin } = require('yargs/helpers');
            const argv = yargs(hideBin(process.argv)).argv;
            const jsdom = require("jsdom");
            const { JSDOM } = jsdom;

            async function cloneWebsite(url, options) {
                // ... your existing cloning logic ...
                // Example using jsdom (replace with your actual logic)
                try{
                    const dom = await JSDOM.fromURL(url);
                    const document = dom.window.document;

                    //Simulate progress
                    console.log(JSON.stringify({progress: ["Fetching HTML"]}))
                    // Extract title (example)
                    const title = document.title;

                    // Extract assets (example - needs more robust logic)
                    let assets = [];
                    if (options.assets) {
                        console.log(JSON.stringify({progress: ["Fetching HTML", "Downloading Assets"]}))
                        const images = [...document.querySelectorAll('img')].map(img => img.src);
                        assets = [...assets, ...images];
                    }

                    let libraries = [];
                    if(options.extract){
                        console.log(JSON.stringify({progress: ["Fetching HTML", "Downloading Assets", "Analyzing Libraries"]}))
                        //Simulate library detection
                        libraries = ["React"];
                    }

                    // Output the results as JSON
                    console.log(JSON.stringify({ title, assets, libraries }));
                } catch(error){
                    console.error(error);
                    console.log(JSON.stringify({error: error.message}))
                }
            }

            if (argv.url) {
                cloneWebsite(argv.url, { assets: argv.assets, extract: argv.extract });
            } else {
                console.log('Please provide a URL using --url');
            }
            ```
          |

metadata:
    priority: high
    version: 1.0
</rule> 